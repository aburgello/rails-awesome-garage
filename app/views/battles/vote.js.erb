// Update the vote count for the car

Swal.fire({
  title: 'Vote Recorded!',
  text: "You've voted for <%= @car.brand %> <%= @car.model %>.",
  icon: 'success',
  confirmButtonText: 'Cool!',
});

if (typeof voteCountElement == 'undefined') {
let voteCountElement = document.querySelector(`#vote-count-<%= @car.id %>`);
if (voteCountElement) {
  voteCountElement.innerText = <%= @votes_count %>; // Update with the new count
}
else {
  voteCountElement.innerText = <%= @votes_count %>; // Update with the new count
}
}
// After a delay, load new cars
setTimeout(() => {
  loadNewCars();
    updateLeaderboard();
}, );


function loadNewCars() {
  fetch('/battles/new_cars')  // This route should return two new cars
    .then(response => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then(data => {
      // Assuming data contains car1 and car2 information
      const carContainer = document.querySelector('#car-container');
      
      const car1HTML = `
     <div class="card bg-white p-6 rounded-lg shadow-md col-span-7 md:col-span-3 mx-2 text-center">
      <h2 class="text-2xl font-semibold"><%= @car1.brand %> <%= @car1.model %></h2>
      <img src="<%= @car1.image_url %>" alt="<%= @car1.brand %> <%= @car1.model %>" class="w-full object-cover rounded-lg mb-4" id="battle-car-img">
      <p class="text-lg text-gray-600 mb-2"><strong>Year:</strong> <%= @car1.year %></p>
      <p class="text-lg text-gray-600 mb-2"><strong>Fuel:</strong> <%= @car1.fuel %></p>
      
      <p class="text-lg text-gray-600 mb-2">
        <strong>Votes:</strong> 
        <span id="vote-count-<%= @car1.id %>"><%= @car1.votes_count || 0 %></span>
      </p>
      
      <%= button_to "Vote for This Car", vote_battle_battles_path(@car1.id), method: :post, remote: true, class: "vote-btn bg-green-500 text-white py-2 px-6 rounded-lg hover:bg-green-600 transition-all mt-4", data: { car_id: @car1.id } %>
    </div>
      `;
      
      const car2HTML = `
       <div class="card bg-white p-6 rounded-lg shadow-md col-span-7 md:col-span-3 mx-2 text-center">
      <h2 class="text-2xl font-semibold"><%= @car2.brand %> <%= @car2.model %></h2>
      <img src="<%= @car2.image_url %>" alt="<%= @car2.brand %> <%= @car2.model %>" class="w-full object-cover rounded-lg mb-4" id="battle-car-img">
      <p class="text-lg text-gray-600 mb-2"><strong>Year:</strong> <%= @car2.year %></p>
      <p class="text-lg text-gray-600 mb-2"><strong>Fuel:</strong> <%= @car2.fuel %></p>
      
      <p class="text-lg text-gray-600 mb-2">
        <strong>Votes:</strong> 
        <span id="vote-count-<%= @car2.id %>"><%= @car2.votes_count || 0 %></span>
      </p>
      
      <%= button_to "Vote for This Car", vote_battle_battles_path(@car2.id), method: :post, remote: true, class: "vote-btn bg-green-500 text-white py-2 px-6 rounded-lg hover:bg-green-600 transition-all mt-4", data: { car_id: @car2.id } %>
    </div>
      `;
      
      carContainer.innerHTML = `${car1HTML}<div class="vs-text text-3xl font-bold mx-auto col-span-7 md:col-span-1 md:py-6">VS</div>${car2HTML}`;
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });
}

function updateLeaderboard() {
  fetch('<%= leaderboard_battles_path %>', {
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.text())
  .then(html => {
    document.querySelector('#leaderboard').innerHTML = html; // Update leaderboard section
  });
}
